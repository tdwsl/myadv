; the script for the adventure
; sal stands for silly adventure lisp

(valid take drop look examine open close lock unlock use)

;; default verbs
(set-var def-take
  '(if (has inventory (x))
    '(print "You already have that.")
    '(if (>= (items inventory) 10)
      '(print "You can't carry any more.")
      '(begin
        (set-at (x) inventory)
        (print "Took " (x) .)))))
(default take (get-var def-take))

(default drop
  '(if (has inventory (x))
    '(begin
      (set-at (x) (here))
      (print "Dropped " (x) .))
    '(print "You don't have that.")))

(default examine
  '(begin
    (list-objects items "It contains ")
    (print "You see nothing special about it.")))

(default eat
  '(if (has inventory (x))
    '(begin
      (print "You eat the " (x) " - yum.")
      (set-at (x) void))
    '(print "You don't have that.")))
;; end default verbs

;; containers
(location inventory "Your Pockets" "This place is always with you, but you shouldn't be inside it!")
(location void "The Void" "You shouldn't be here! This is where objects go to die.")
;; end containers

(location house-front "Front of House" "You are standing out the front of the house, facing north toward it.")
(goto house-front)

(object door "a door" house-front)
(how door take
  '(print "It's too heavy."))
(how door open
  '(print "It's locked."))
(how door lock
  '(print "And why would you want to do that?"))
(how door examine
  '(begin
    (print "To the north, a sturdy door built from oak.")
    (if (= (get-exit house-front n) living-room)
      '(print "Through it you can see the living room.")
      '(print "It is closed."))))
(how door unlock
  '(if (has inventory key)
    '(begin
      (print "You unlock the door.")
      (how door open
        '(if (= (get-exit house-front n) living-room)
          '(print "It's already open.")
          '(begin
            (print "You open the door.")
            (set-exit house-front n living-room))))
      (how door unlock '(print "It's not locked.")))
    '(print "You don't have a key.")))
(how door close
  '(if (= (get-exit house-front n) living-room)
    '(begin
      (print "You close the door.")
      (set-exit house-front n nil))
    '(print "It isn't open.")))
(how door take nil)

(object key "a silver key" void)
(object rock "a small rock" clearing)
(how rock take
  '(begin
    (if t (get-var def-take))
    (if (has inventory rock)
      '(begin
        (print "You see something shiny underneath it...")
        (set-at key clearing)
        (how rock take (get-var def-take))))))

(location living-room "Living Room" "The room has green walls and plank flooring.")
(set-exit living-room s house-front)

(location forest-path "Forest Path" "A nice little path in the forest.")
(set-exit house-front e forest-path)
(set-exit forest-path w house-front)

(location clearing "Clearing" "You have come to a clearing. A nice warm breeze blows through the grass.")
(set-exit clearing s forest-path)
(set-exit forest-path n clearing)

(location riverside "By The River" "Next to the river. The evening light reflects off the pale green water.
There is a boat here that you could use to cross.")
(set-exit riverside n forest-path)
(set-exit forest-path s riverside)

(object shovel "a rusty old shovel" living-room)
(how shovel use
  '(if (and (= (here) cave) (= (get-exit cave d) nil))
    '(begin
      (print "You dig through the sand.")
      (description cave "A dark, sand-free cave.")
      (set-exit cave d pit))
    '(print "You'd do better somewhere with sand.")))
    
(object boat "a wooden boat" riverside)
(how boat use
  '(if (has inventory shovel)
    '(begin
      (print "The shovel will do. You row, row, row your boat, gently down the stream.")
      (if (= (here) riverside) '(goto beach) '(goto riverside)))
    '(print "You need something to row with.")))
(how boat take nil)

(location beach "Shale Beach" "The pebbles on this shale beach make you uneven on your feet.
A river leads north. You can see a cave.")
(set-exit beach sw cave)

(location cave "Dark Cave" "Shadows creep along the walls of this cave. There is sand here.")
(set-exit cave ne beach)

(location pit "Pit" "You have made it to a pit, situated below the cave.")
(set-exit pit u cave)
